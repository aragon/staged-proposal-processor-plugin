ReportProposalResult_SPP_UnitTest
├── when proposal exists
│   ├── when stage id is not valid
│   │   ├── when stageId bigger than currentStage
│   │   │   └── it should revert.
│   │   └── when stageId does not exist // stageId >= proposal.stages.length
│   │       └── it should revert.
│   └── when stage id is valid
│       ├── when stageId is currentStage
│       │   ├── when voteDuration has passed
│       │   │   ├── it should record the result.
│       │   │   └── it should emit ProposalResultReported event.
│       │   └── when voteDuration has not passed
│       │       ├── when should try advance stage  // _tryAdvance is true
│       │       │   ├── when proposal is Advanceable
│       │       │   │   ├── when proposal is at last stage
│       │       │   │   │   ├── when caller is trusted forwarder
│       │       │   │   │   │   ├── when sender has execute permission
│       │       │   │   │   │   │   ├── it should use the sender stored in the call data.
│       │       │   │   │   │   │   ├── it should record the result and emit ProposalResultReported event.
│       │       │   │   │   │   │   └── it should execute the proposal and emit ProposalExecuted event.
│       │       │   │   │   │   └── when sender has no execute permission
│       │       │   │   │   │       ├── it should use the sender stored in the call data.
│       │       │   │   │   │       ├── it should record the result and emit ProposalResultReported event.
│       │       │   │   │   │       └── it should not execute the proposal.
│       │       │   │   │   └── when caller is executor using delegatecall
│       │       │   │   │       ├── when caller has execute permission
│       │       │   │   │       │   ├── it should record the result and emit ProposalResultReported event.
│       │       │   │   │       │   └── it should execute the proposal and emit ProposalExecuted event.
│       │       │   │   │       └── when caller has no execute permission
│       │       │   │   │           ├── it should record the result and emit ProposalResultReported event.
│       │       │   │   │           └── it should not execute the proposal.
│       │       │   │   └── when proposal is not at last stage
│       │       │   │       ├── when caller is trusted forwarder1
│       │       │   │       │   ├── when sender has advance permission
│       │       │   │       │   │   ├── it should use the sender stored in the call data.
│       │       │   │       │   │   ├── it should record the result and emit ProposalResultReported event.
│       │       │   │       │   │   └── it should advance to next stage, create sub-proposals and emit ProposalAdvanced event.
│       │       │   │       │   └── when sender has no advance permission
│       │       │   │       │       ├── it should use the sender stored in the call data.
│       │       │   │       │       └── it should record the result and emit ProposalResultReported event.
│       │       │   │       │       └── it should not advance the proposal.
│       │       │   │       └── when caller is executor using delegatecall1
│       │       │   │           ├── when caller has advance permission
│       │       │   │           │   ├── it should record the result and emit ProposalResultReported event.
│       │       │   │           │   └── it should advance to next stage, create sub-proposals and emit ProposalAdvanced event.
│       │       │   │           └── when caller has no advance permission
│       │       │   │               ├── it should record the result and emit ProposalResultReported event.
│       │       │   │               └── it should not advance the proposal.
│       │       │   └── when proposal is not Advanceable
│       │       │       ├── given caller is trusted forwarder1
│       │       │       │   ├── it should use the sender stored in the call data.
│       │       │       │   └── it should record the result and emit ProposalResultReported event.
│       │       │       └── given caller is executor using delegatecall1
│       │       │           └── it should record the result and emit ProposalResultReported event.
│       │       └── when should not try advance stage  // _tryAdvance is false
│       │           ├── given caller is trusted forwarder
│       │           │   ├── it should use the sender stored in the call data.
│       │           │   ├── it should record the result.
│       │           │   └── it should emit ProposalResultReported event.
│       │           └── given caller is executor using delegatecall
│       │               ├── it should use the msg.sender that is the plugin.
│       │               ├── it should record the result.
│       │               └── it should emit ProposalResultReported event.
│       └── when stageId lower than currentStage  // past stage can report result
│           ├── it should record the result.
│           └── it should emit ProposalResultReported event.
└── when non existent proposal
    └── it should revert.